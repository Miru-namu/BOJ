
#  N, m, M, T, R = map(int, input().split())
#  운동시간 N
#  초기맥박 m (맥박 m 이하로 안떨어짐)
#  최대맥박 M (맥박 M 넘으면 안됨)
#  1분 맥박 증가 T
#  1분 휴식 맥박 감소 R
#  현재맥박 = k

# 예제 입력 1 
# 5 70 120 25 15
# 예제 출력 1 
# 10

N, m, M, T, R = map(int, input().split())
sum = 0
min_m = m
S = M - T
if m+T > M:
    print(-1)
else:
    while N > 0:
        if m+T <= M:
            m += T
            N -= 1
            sum += 1
        elif N != 0 and m+T > M:
            m -= R
            if m < min_m:
                m = min_m
            sum += 1
        elif N == 0:
            break
    print(sum)
    

# 문제
# 영식이가 운동을 하는 과정은 1분 단위로 나누어져 있다. 매 분마다 영식이는 운동과 휴식 중 하나를 선택해야 한다.

# 운동을 선택한 경우, 영식이의 맥박이 T만큼 증가한다. 즉, 영식이의 맥박이 X였다면, 1분 동안 운동을 한 후 맥박이 X+T가 되는 것이다. 
# 영식이는 맥박이 M을 넘는 것을 원하지 않기 때문에, X+T가 M보다 작거나 같을 때만 운동을 할 수 있다. 휴식을 선택하는 경우 맥박이 R만큼 감소한다. 
# #즉, 영식이의 맥박이 X였다면, 1분 동안 휴식을 한 후 맥박은 X-R이 된다. 맥박은 절대로 m보다 낮아지면 안된다. 따라서, X-R이 m보다 작으면 맥박은 m이 된다.
# 영식이의 초기 맥박은 m이다. 운동을 N분 하려고 한다. 이때 운동을 N분하는데 필요한 시간의 최솟값을 구해보자. 운동하는 시간은 연속되지 않아도 된다.

# 입력
# 첫째 줄에 다섯 정수 N, m, M, T, R이 주어진다.

# 출력
# 첫째 줄에 운동을 N분하는데 필요한 시간의 최솟값을 출력한다.. 만약 운동을 N분 할 수 없다면 -1을 출력한다.

# 제한
# 1 ≤ N, T, R ≤ 200
# 50 ≤ m ≤ M ≤ 200
# 예제 입력 1 
# 5 70 120 25 15
# 예제 출력 1 
# 10
# 예제 입력 2 
# 100 50 100 5 200
# 예제 출력 2 
# 109
# 예제 입력 3 
# 1 60 70 11 11
# 예제 출력 3 
# -1
# 예제 입력 4 
# 200 50 200 150 1
# 예제 출력 4 
# 30050
# 예제 입력 5 
# 19 89 143 17 13
# 예제 출력 5 
# 40